// Code generated by sqlc. DO NOT EDIT.
// source: contents.sql

package db

import (
	"context"
	"time"
)

const deleteContent = `-- name: DeleteContent :exec
DELETE FROM contents
WHERE id = $1
`

func (q *Queries) DeleteContent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteContent, id)
	return err
}

const getContent = `-- name: GetContent :one
SELECT id, fileid, name, size, created_at FROM contents
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContent(ctx context.Context, id int32) (Content, error) {
	row := q.db.QueryRowContext(ctx, getContent, id)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Fileid,
		&i.Name,
		&i.Size,
		&i.CreatedAt,
	)
	return i, err
}

const getContentUpdate = `-- name: GetContentUpdate :one
SELECT id, fileid, name, size, created_at FROM contents
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetContentUpdate(ctx context.Context, id int32) (Content, error) {
	row := q.db.QueryRowContext(ctx, getContentUpdate, id)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Fileid,
		&i.Name,
		&i.Size,
		&i.CreatedAt,
	)
	return i, err
}

const listContents = `-- name: ListContents :many
SELECT id, fileid, name, size, created_at FROM contents
WHERE fileid = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListContentsParams struct {
	Fileid string `json:"fileid"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListContents(ctx context.Context, arg ListContentsParams) ([]Content, error) {
	rows, err := q.db.QueryContext(ctx, listContents, arg.Fileid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Content{}
	for rows.Next() {
		var i Content
		if err := rows.Scan(
			&i.ID,
			&i.Fileid,
			&i.Name,
			&i.Size,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContent = `-- name: UpdateContent :one
UPDATE contents
SET name = $2
WHERE id = $1
RETURNING id, fileid, name, size, created_at
`

type UpdateContentParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateContent(ctx context.Context, arg UpdateContentParams) (Content, error) {
	row := q.db.QueryRowContext(ctx, updateContent, arg.ID, arg.Name)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Fileid,
		&i.Name,
		&i.Size,
		&i.CreatedAt,
	)
	return i, err
}

const createContent = `-- name: createContent :one
INSERT INTO contents (
  fileid,
  name,
  size,
  created_at
) VALUES (
  $1, $2, $3, $4
) RETURNING id, fileid, name, size, created_at
`

type createContentParams struct {
	Fileid    string    `json:"fileid"`
	Name      string    `json:"name"`
	Size      int64     `json:"size"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) createContent(ctx context.Context, arg createContentParams) (Content, error) {
	row := q.db.QueryRowContext(ctx, createContent,
		arg.Fileid,
		arg.Name,
		arg.Size,
		arg.CreatedAt,
	)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Fileid,
		&i.Name,
		&i.Size,
		&i.CreatedAt,
	)
	return i, err
}
